





# Importing necessary libraries
import ast

# Function to filter even numbers from a list
def filter_even_numbers(input_list):
    return [num for num in input_list if num % 2 == 0]

# Function to reverse a list in-place
def reverse_list_in_place(input_list):
    input_list.reverse()

# Script to sort and print a tuple of strings alphabetically
def sort_and_print_tuple(input_tuple):
    sorted_tuple = tuple(sorted(input_tuple))
    print(sorted_tuple)

# Function to find the index of a specific element in a tuple
def find_index_in_tuple(input_tuple, element):
    return input_tuple.index(element) if element in input_tuple else -1

# Program to merge two dictionaries and combine ages for common keys
def merge_dictionaries(dict1, dict2):
    merged_dict = dict1.copy()
    for key, value in dict2.items():
        if key in merged_dict:
            merged_dict[key] += value
        else:
            merged_dict[key] = value
    return merged_dict

# Function to check if a key exists in a dictionary
def key_exists_in_dictionary(dictionary, key):
    return key in dictionary

# Function to find common elements between two sets
def find_common_elements(set1, set2):
    return set1.intersection(set2)

# Program to remove duplicates from a list and convert it to a set
def remove_duplicates_and_convert_to_set(input_list):
    unique_set = set(input_list)
    return unique_set

# Function to modify a list by squaring each element
def square_elements(input_list):
    for i in range(len(input_list)):
        input_list[i] **= 2

# Script to attempt modifying an element in a tuple and handle the error gracefully
def modify_tuple_element(input_tuple, index, new_value):
    try:
        modified_tuple = tuple(list(input_tuple[:index]) + [new_value] + list(input_tuple[index+1:]))
        print("Modified Tuple:", modified_tuple)
    except TypeError as e:
        print("Error:", e)

# Program to prompt user for a number, convert to integer, square, and print the result
def square_user_input():
    user_input = input("Enter a number as a string: ")
    try:
        num = int(user_input)
        result = num ** 2
        print("Squared Value:", result)
    except ValueError as e:
        print("Error:", e)

# Function to sum a list of numbers as strings and return the result as an integer
def sum_numbers_as_strings(input_list):
    return sum(map(int, input_list))

# Employee Information Management System
class EmployeeManagementSystem:
    def __init__(self):
        self.employee_data = {}

    def add_employee(self, emp_id, emp_name, emp_salary, emp_department):
        self.employee_data[emp_id] = {'name': emp_name, 'salary': emp_salary, 'department': emp_department}

    def update_employee_details(self, emp_id, new_name, new_salary, new_department):
        if emp_id in self.employee_data:
            self.employee_data[emp_id]['name'] = new_name
            self.employee_data[emp_id]['salary'] = new_salary
            self.employee_data[emp_id]['department'] = new_department
            print("Employee details updated successfully.")
        else:
            print("Employee not found.")

    def average_salary_in_department(self, department):
        salaries = [emp['salary'] for emp in self.employee_data.values() if emp['department'] == department]
        if salaries:
            return sum(salaries) / len(salaries)
        else:
            return 0

# Example Usage
# You can add more test cases and use the functions as needed.

# List Manipulation
numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers = filter_even_numbers(numbers_list)
print("Even Numbers:", even_numbers)

reverse_list_in_place(numbers_list)
print("Reversed List:", numbers_list)

# Tuple Operations
tuple_of_strings = ('apple', 'banana', 'orange', 'grape')
sort_and_print_tuple(tuple_of_strings)

element_to_find = 'orange'
index = find_index_in_tuple(tuple_of_strings, element_to_find)
print(f"Index of '{element_to_find}': {index}")

# Dictionary Operations
dict1 = {'Alice': 25, 'Bob': 30, 'Charlie': 22}
dict2 = {'Bob': 35, 'David': 28}
merged_dict = merge_dictionaries(dict1, dict2)
print("Merged Dictionary:", merged_dict)

key_to_check = 'Alice'
print(f"Does '{key_to_check}' exist in the dictionary? {key_exists_in_dictionary(merged_dict, key_to_check)}")

# Set Operations
set1 = {1, 2, 3, 4, 5}
set2 = {3, 4, 5, 6, 7}
common_elements = find_common_elements(set1, set2)
print("Common Elements:", common_elements)

list_with_duplicates = [1, 2, 2, 3, 4, 4, 5]
unique_set = remove_duplicates_and_convert_to_set(list_with_duplicates)
print("Unique Set:", unique_set)

# Mutability and Immutability
numbers_list_to_square = [1, 2, 3, 4, 5]
square_elements(numbers_list_to_square)
print("Squared List:", numbers_list_to_square)

tuple_to_modify = (1, 2, 3, 4, 5)
modify_tuple_element(tuple_to_modify, 2, 99)

# Type Casting
square_user_input()

numbers_as_strings = ['10', '20', '30', '40']
sum_result = sum_numbers_as_strings(numbers_as_strings)
print("Sum of Numbers as Strings:", sum_result)

# Employee Information Management
employee_system = EmployeeManagementSystem()
employee_system.add_employee(1, 'John Doe', 50000, 'HR')
employee_system.add_employee(2, 'Jane Smith', 60000, 'IT')

# Update employee details
employee_system.update_employee_details(1, 'John Doe Jr.', 55000, 'Finance')

# Calculate average salary in a specific department
average_salary_hr = employee_system.average_salary_in_department('HR')
print("Average Salary in HR department:", average_salary_hr)
















### 1. Leap Year Checker:

```python
def is_leap_year(year):
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        return True
    else:
        return False

# Example usage:
input_year = int(input("Enter a year: "))
if is_leap_year(input_year):
    print(f"{input_year} is a leap year.")
else:
    print(f"{input_year} is not a leap year.")
```

### 2. Temperature Converter:

```python
def celsius_to_fahrenheit(celsius):
    fahrenheit = (celsius * 9/5) + 32
    return fahrenheit

# Example usage:
celsius_temperature = float(input("Enter temperature in Celsius: "))
fahrenheit_temperature = celsius_to_fahrenheit(celsius_temperature)
print(f"The temperature in Fahrenheit is: {fahrenheit_temperature}")

if fahrenheit_temperature > 30:
    print("It's hot!")
elif fahrenheit_temperature > 10:
    print("It's moderate.")
else:
    print("It's cold.")
```

### 3. Number Classifier:

```python
def classify_number(number):
    if number > 0:
        classification = "Positive"
    elif number < 0:
        classification = "Negative"
    else:
        classification = "Zero"

    if number % 2 == 0:
        parity = "Even"
    else:
        parity = "Odd"

    return f"{classification}, {parity}"

# Example usage:
input_number = int(input("Enter an integer: "))
result = classify_number(input_number)
print(result)
```

### 4. Vowel or Consonant:

```python
def check_vowel_consonant(char):
    vowels = "aeiouAEIOU"
    if char.isalpha() and len(char) == 1:
        if char in vowels:
            result = "Vowel"
        else:
            result = "Consonant"
    else:
        result = "Invalid input (not a single alphabet character)."
    return result

# Example usage:
input_char = input("Enter a single character: ")
result = check_vowel_consonant(input_char)
print(result)
```

### 5. Simple Calculator:

```python
def simple_calculator(num1, num2, operator):
    try:
        if operator == '+':
            result = num1 + num2
        elif operator == '-':
            result = num1 - num2
        elif operator == '*':
            result = num1 * num2
        elif operator == '/':
            if num2 != 0:
                result = num1 / num2
            else:
                return "Error: Division by zero."
        else:
            return "Invalid operator."
        return f"Result: {result}"
    except Exception as e:
        return f"Error: {e}"

# Example usage:
number1 = float(input("Enter the first number: "))
number2 = float(input("Enter the second number: "))
operation = input("Enter the operator (+, -, *, /): ")
calculation_result = simple_calculator(number1, number2, operation)
print(calculation_result)
```

### 6. Discount Calculator:

```python
def calculate_discounted_price(original_price, discount_percentage):
    discounted_price = original_price - (original_price * discount_percentage / 100)
    return discounted_price

# Example usage:
original_price = float(input("Enter the original price: "))
discount_percentage = float(input("Enter the discount percentage: "))
discounted_price = calculate_discounted_price(original_price, discount_percentage)
print(f"The discounted price is: {discounted_price}")
```

### 7. Guess the Number:

```python
import random

def guess_the_number():
    target_number = random.randint(1, 100)
    attempts = 0

    while True:
        user_guess = int(input("Guess the number (between 1 and 100): "))
        attempts += 1

        if user_guess == target_number:
            print(f"Congratulations! You guessed the number in {attempts} attempts.")
            break
        elif user_guess < target_number:
            print("Try again. The number is higher.")
        else:
            print("Try again. The number is lower.")

# Example usage:
guess_the_number()
```

### 8. Triangle Classifier:

```python
def classify_triangle(side1, side2, side3):
    if side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1:
        if side1 == side2 == side3:
            return "Equilateral triangle"
        elif side1 == side2 or side1 == side3 or side2 == side3:
            return "Isosceles triangle"
        else:
            return "Scalene triangle"
    else:
        return "Invalid input. The sides cannot form a triangle."

# Example usage:
side_a = float(input("Enter the length of side a: "))
side_b = float(input("Enter the length of side b: "))
side_c = float(input("Enter the length of side c: "))
triangle_type = classify_triangle(side_a, side_b, side_c)
print(f"The triangle is a {triangle_type}.")
```

### 9. BMI Calculator:

```python
def calculate_bmi(weight, height):
    bmi = weight / (height ** 2)
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi < 24.9:
        return "Normal weight"
    elif 25 <= bmi < 29.9:
        return "Overweight"
    else:
        return "Obese"

# Example usage:
user_weight = float(input("Enter your weight in kilograms: "))
user_height = float(input("Enter your height in meters: "))
bmi_result = calculate_bmi(user_weight, user_height)
print(f"Your BMI indicates: {bmi_result}")
```

### 10. Time Converter:

```python
def convert_seconds_to_time(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    remaining_seconds = seconds % 60
    return hours, minutes, remaining_seconds

# Example usage:
total_seconds = int(input("Enter the total seconds: "))
hours, minutes, seconds = convert_seconds_to_time(total_seconds)
print(f"The converted time is: {hours} hours, {minutes} minutes, {seconds} seconds.")
```
